from langchain_community.tools import WikipediaQueryRun 
from langchain_community.utilities import WikipediaAPIWrapper
from langchain_community.tools import YouTubeSearchTool  
from langchain_community.tools.openai_dalle_image_generation import (
   OpenAIDALLEImageGenerationTool
)
from langchain_community.utilities.dalle_image_generator import DallEAPIWrapper
from langchain_openai import ChatOpenAI
from langchain_core.messages import HumanMessage, AIMessageChunk, SystemMessage
import streamlit as st
import os
os.environ["OPENAI_API_KEY"] = "----"

chat_model = ChatOpenAI(api_key=os.getenv("OPENAI_API_KEY"))




wiki_api_wrapper = WikipediaAPIWrapper(top_k_results=1, doc_content_chars_max=250)
wikipedia = WikipediaQueryRun(description="A tool to explain things in text format. Use this tool if you think the user’s asked concept is best explained through text.", api_wrapper=wiki_api_wrapper)
# print(wikipedia.invoke("Mobius strip"))


dalle_api_wrapper = DallEAPIWrapper(model="dall-e-3", size="1792x1024")
dalle = OpenAIDALLEImageGenerationTool(
   api_wrapper=dalle_api_wrapper, description="A tool to generate images. Use this tool if you think the user’s asked concept is best explained through an image."
)
# output = dalle.invoke("A mountain bike illustration.")
# print(output)

youtube = YouTubeSearchTool(
   description="A tool to search YouTube videos. Use this tool if you think the user’s asked concept can be best explained by watching a video."
)
# youtube.run("Oiling a bike's chain")
api_key = "--------"

tools = [wikipedia, dalle, youtube]

def execute(agent, query):
   response = agent.invoke({'messages': [HumanMessage(query)]})
  
   for message in response['messages']:
       print(
           f"{message.__class__.__name__}: {message.content}"
       )  # Print message class name and its content
      
       print("-" * 20, end="\n")
  
   return response

from langgraph.prebuilt import create_react_agent
system_prompt = SystemMessage(
   """
   You are a helpful bot named Chandler. Your task is to explain topics
   asked by the user via three mediums: text, image or video.
  
   If the asked topic is best explained in text format, use the Wikipedia tool.
   If the topic is best explained by showing a picture of it, generate an image
   of the topic using Dall-E image generator and print the image URL.
   Finally, if video is the best medium to explain the topic, conduct a YouTube search on it
   and return found video links.
   """
)
# agent = create_react_agent(chat_model, tools, state_modifier=system_prompt)


agent = create_react_agent(chat_model, tools, state_modifier=system_prompt)
# response = execute(agent, query='Explain the Fourier Series visually.')

import requests
from PIL import Image
from io import BytesIO

# Streamlit UI
st.title("AGENTIC: InsightEdge Intelligent Chatbot")
st.markdown("""
    Explore Any Topic Through Text, Stunning Visuals, or Engaging Videos
""")

# User input query
query = st.text_input("Enter your query here:", placeholder="E.g., Explain the Fourier Series visually")


if st.button("Start Process"):
    if query:
        with st.spinner("Chandler is thinking..."):
            # Run the agent with the user query
            response = execute(agent, query = query)
        
        # Check the response for image URL
        messages = response.get("messages", [])
        for message in messages:
            content = message.content
            
            # If the response is a DALL·E image link
            if content.startswith("http") and "blob.core.windows.net" in content:
                try:
                    # Download the image from the URL
                    image_response = requests.get(content)
                    image_response.raise_for_status()  # Raise error for failed requests
                    image = Image.open(BytesIO(image_response.content))
                    
                    # Display the image in Streamlit
                    st.image(image, caption="Generated by DALL·E", use_container_width=True)
                
                except Exception as e:
                    st.error(f"Failed to load image: {e}")
            
            
        # Check if the response is a YouTube link
            elif "youtube.com" in content:
                
        # Extract the URL from the markdown link
                url_start = content.find('https://')
                url_end = content.find(')', url_start)
                video_url = content[url_start:url_end]
                
                # Display the YouTube video in Streamlit
                st.video(video_url)
            else:
                # If it's not a YouTube link, you can display it as text or handle it differently
                st.write(content)
                    # Otherwise, treat it as a text response
            # else:
            #     st.write(content)

    else:
                st.warning("Please enter a query to get started!")
                
                